"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class BooleanUtils{static isBoolean(t){return"boolean"==typeof t}static hasValue(t){return 1==t&&1==t}static isTrue(t){return!0===t}static isFalse(t){return!1===t}}class CastUtils{static castTo(t,n){return Object.assign(new t,n)}}class List{static from(t,n){let o=new List;for(var i in t){let e=n?n(t[i]):t[i];o.add(n(e))}return o}constructor(t){this.list=null,void 0!==t&&t instanceof Array?this.list=t:this.list=[]}get(t){return this.list[t]}set(t,n){return this.list[t]=n,this}getLast(){return this.list.length>0?this.list[this.list.length-1]:null}setLast(t){return this.list.length>0?(this.list[this.list.length-1]=t,this):null}add(t){this.list.push(t)}remove(t){this.list=this.list.filter(function(n){return n!=t})}size(){return this.list.length}valueAtEquals(t,n){return null!==this.get(t)&&void 0!==this.get(t)&&this.get(t)===n}contains(t){return this.getArray().includes(t)}firstValueEquals(t){return this.valueAtEquals(0,t)}forEach(t,n){for(let o of this.list)if(!t(o,n))break}addAll(t){t.forEach(function(t,n){return n.add(t),!0},this)}getArray(){return this.list}}const FATAL=1,ERROR=2,WARN=3,INFO=4,DEBUG=5,FATAL_LABEL="FATAL",ERROR_LABEL="ERROR",WARN_LABEL="WARN ",INFO_LABEL="INFO ",DEBUG_LABEL="DEBUG";let logLevel=4;class Logger{constructor(t){this.logName=t}static setLevel(t){logLevel=t}info(t,n=0){Logger.log(t,this.logName,4,"INFO ",t=>{console.info(t)},n)}warn(t,n=0){Logger.log(t,this.logName,3,"WARN ",t=>{console.warn(t)},n)}debug(t,n=0){Logger.log(t,this.logName,5,"DEBUG",t=>{console.debug(t)},n)}error(t,n=0){Logger.log(t,this.logName,2,"ERROR",t=>{console.error(t)},n)}fatal(t,n=0){Logger.log(t,this.logName,1,"FATAL",t=>{console.fatal(t)},n)}static log(t,n,o,i,e,r){if(!(logLevel<o)){let o=(new Date).toISOString();if("object"==typeof t)return e(i+" "+o+" "+n+":"),void e(t);e(i+" "+o+" "+n+" "+Logger.indent(r,t))}}static indent(t,n){if(0===t)return n;let o="";o+=t;for(let n=0;n<t;n++)o+=" ";return o+=n}showPos(t,n){if(!(logLevel<5)){let o="";for(let i=0;i<t.length;i++)o+=i==n?"+":" ";console.log(o),console.log(t),console.log(o)}}}class Map{constructor(){this.map={}}size(){return Object.keys(this.map).length}get(t){return this.map[t]}set(t,n){return this.map[t]=n,this}remove(t){delete this.map[t]}contains(t){return this.exists(t)}exists(t){return t in this.map}forEach(t,n){for(let o in this.map)if(!t(o,this.map[o],n))break}addAll(t){t.forEach(function(t,n,o){return o.set(t,n),!0},this)}}class NumberUtils{static isNumber(t){return"number"==typeof t}static hasValue(t){return null===t||void 0===t}}class ObjectFunction{constructor(t,n){this.object=t,this.function=n}getObject(){return this.object}getFunction(){return this.function}call(t){this.function.call(this.object,t)}}const LOG=new Logger("ObjectMapper");class ObjectMapper{static map(t,n){return void 0===t&&LOG.error("No source object"),void 0===n&&LOG.error("No destination object"),new List(Object.keys(t)).forEach(o=>{if(void 0===n[o])throw LOG.error("Unable to map "+o+" from"),LOG.error(t),LOG.error("to"),LOG.error(n),"Unable to map object";n[o]=t[o];return!0},this),n}}class PropertyAccessor{static getValue(t,n){for(var o=n.split("."),i=0,e=o.length;i<e;++i){var r=o[i];if(!(r in t))return;t=t[r]}return t}static setValue(t,n,o){for(var i=n.split("."),e=0,r=i.length;e<r;++e){var s=i[e];if(e==r-1)return void(t[s]=o);s in t&&null!==t[s]||(t[s]={}),t=t[s]}}}class StringUtils{static isInAlphabet(t){return t.charCodeAt(0)>=65&&t.charCodeAt(0)<=90||(t.charCodeAt(0)>=97&&t.charCodeAt(0)<=122||t.charCodeAt(0)>=48&&t.charCodeAt(0)<=57)}static isString(t){return"string"==typeof t}static isBlank(t){return!StringUtils.hasValue(t)||""===t}static hasValue(t){return 1==t&&1==t}}exports.BooleanUtils=BooleanUtils,exports.CastUtils=CastUtils,exports.List=List,exports.Logger=Logger,exports.Map=Map,exports.NumberUtils=NumberUtils,exports.ObjectFunction=ObjectFunction,exports.ObjectMapper=ObjectMapper,exports.PropertyAccessor=PropertyAccessor,exports.StringUtils=StringUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
