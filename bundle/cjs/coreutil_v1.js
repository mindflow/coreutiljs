'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

class BooleanUtils {

    static isBoolean(val) {
        return typeof val === "boolean";
    }

    static hasValue(val) {
        if(val ==! null && val ==! undefined) {
            return true;
        }
        return false;
    }

    static isTrue() {
        if(val === true) {
            return true;
        }
        return false;
    }

    static isFalse() {
        if(val === false) {
            return true;
        }
        return false;
    }
}

/* jshint esversion: 6 */

/**
 * Generic List class
 */
class List {

    /**
     * Create new list and optionally assign existing array
     * 
     * @param {Array} values 
     */
    constructor(values) {
        if(values !== undefined && values instanceof Array){
            this._list = values;
        }else{
            this._list = [];
        }
    }

    /**
     * Get value of position
     * 
     * @param {number} index 
     * @return {any}
     */
    get(index) {
        return this._list[index];
    }

    /**
     * Set value on position
     * 
     * @param {number} index 
     * @param {any} value 
     */
    set(index,value) {
        this._list[index] = value;
    }

    /**
     * Add value to end of list
     * 
     * @param {any} value 
     */
    add(value) {
        this._list.push(value);
    }

    /**
     * Get the size of the list
     * 
     * @return {number}
     */
    size() {
        return this._list.length;
    }

    valueAtEquals(index,val) {
        if(this.get(index) !== null && this.get(index) !== undefined){
            return this.get(index) === val;
        }
        return false;
    }

    firstValueEquals(val) {
        return this.valueAtEquals(0,val);
    }

    /**
     * Run the function for each value in the list
     * 
     * @param {function} listener - The function to call for each entry
     * @param {any} parent - The outer context passed into the function, function should return true to continue and false to break
     */
    forEach(listener,parent) {
        for(let val of this._list) {
            if(!listener(val,parent)){
                break;
            }
        }
    }

}

/* jshint esversion: 6 */

class Logger{

    static disableDebug() {
        Logger.debugEnabled = false;
    }

    static enableDebug() {
        Logger.debugEnabled = true;
    }

    static log(value){
        console.log(value);
    }

    static debug(depth, value){
        if(!Logger.debugEnabled){
            return;
        }
        let line = '';
        line = line + depth;
        for(let i = 0 ; i < depth ; i++){
            line = line + ' ';
        }
        line = line + value;
        console.log(line);
    }

    static warn(value){
        console.warn('------------------WARN------------------');
        console.warn(value);
        console.warn('------------------/WARN------------------');
    }

    static error(value){
        console.error('------------------ERROR------------------');
        console.error(value);
        console.error('------------------/ERROR------------------');
    }

    static showPos(text,position){
        if(!Logger.debugEnabled){
            return;
        }
        let cursorLine = '';
        for(let i = 0 ; i < text.length ; i++) {
            if(i == position){
                cursorLine = cursorLine + '+';
            }else{
                cursorLine = cursorLine + ' ';
            }
        }
        console.log(cursorLine);
        console.log(text);
        console.log(cursorLine);

    }

}
Logger.debugEanbled = false;

/* jshint esversion: 6 */

class Map {

    constructor() {
        this._map = {};
    }

    size() {
        return Object.keys(this._map).length;
    }

    get(name) {
        return this._map[name];
    }

    set(name,value) {
        this._map[name] = value;
    }

    contains(name) {
        return this.exists(name);
    }

    exists(name){
        if (name in this._map) {
            return true;
        }
        return false;
    }

    forEach(listener,parent) {
        for(let key in this._map) {
            if(!listener(key,this._map[key],parent)){
                break;
            }
        }
    }

    addAll(sourceMap){
        sourceMap.forEach(function(key,value,parent) {
            parent.set(key,value);
        },this);
    }

}

class NumberUtils {

    static isNumber(val) {
        return typeof val === "string";
    }

    static hasValue(val) {
        if(val === null || val === undefined) {
            return true;
        }
        return false;
    }
}

/* jshint esversion: 6 */

class ObjectFunction{

    constructor(theObject,theFunction){
        this._object = theObject;
        this._function = theFunction;
    }

    getObject(){
        return this._object;
    }

    getFunction(){
        return this._function;
    }

    call(params){
        this._function.call(this._object,params);
    }

}

/* jshint esversion: 6 */

class PropertyAccessor{

    static getValue(destination, name) {
        var pathArray = name.split('.');
        for (var i = 0, n = pathArray.length; i < n; ++i) {
            var key = pathArray[i];
            if (key in destination) {
                destination = destination[key];
            } else {
                return;
            }
        }
        return destination;
    }

    static setValue(destination, name, value) {
        var pathArray = name.split('.');
        for (var i = 0, n = pathArray.length; i < n; ++i) {
            var key = pathArray[i];
            if(i == n-1){
                destination[key] = value;
                return;
            }
            if (!(key in destination) || destination[key] === null) {
                destination[key] = {};
            }
            destination = destination[key];
        }
    }

}

/* jshint esversion: 6 */

class StringUtils{

    static isInAlphabet(val) {
        if (val.charCodeAt(0) >= 65 && val.charCodeAt(0) <= 90) {
            return true;
        }
        if ( val.charCodeAt(0) >= 97 && val.charCodeAt(0) <= 122 ) {
            return true;
        }
        if ( val.charCodeAt(0) >= 48 && val.charCodeAt(0) <= 57 ) {
            return true;
        }
        return false;
    }

    static isString(val) {
        return typeof val === "string";
    }

    static isBlank(val) {
        if(!StringUtils.hasValue(val) || val === "") {
            return true;
        }
        return false;
    }

    static hasValue(val) {
        if(val ==! null && val ==! undefined) {
            return true;
        }
        return false;
    }
}

exports.BooleanUtils = BooleanUtils;
exports.List = List;
exports.Logger = Logger;
exports.Map = Map;
exports.NumberUtils = NumberUtils;
exports.ObjectFunction = ObjectFunction;
exports.PropertyAccessor = PropertyAccessor;
exports.StringUtils = StringUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
